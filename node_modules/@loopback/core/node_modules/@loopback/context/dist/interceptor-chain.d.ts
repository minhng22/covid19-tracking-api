import { BindingFilter } from './binding-filter';
import { BindingAddress } from './binding-key';
import { BindingComparator } from './binding-sorter';
import { Context } from './context';
import { InvocationResult } from './invocation';
import { ValueOrPromise } from './value-promise';
/**
 * The `next` function that can be used to invoke next generic interceptor in
 * the chain
 */
export declare type Next = () => ValueOrPromise<InvocationResult>;
/**
 * An interceptor function to be invoked in a chain for the given context.
 * It serves as the base interface for various types of interceptors, such
 * as method invocation interceptor or request/response processing interceptor.
 *
 * @typeParam C - `Context` class or a subclass of `Context`
 * @param context - Context object
 * @param next - A function to proceed with downstream interceptors or the
 * target operation
 *
 * @returns The invocation result as a value (sync) or promise (async)
 */
export declare type GenericInterceptor<C extends Context = Context> = (context: C, next: Next) => ValueOrPromise<InvocationResult>;
/**
 * Interceptor function or a binding key that resolves a generic interceptor
 * function
 * @typeParam C - `Context` class or a subclass of `Context`
 * @typeParam T - Return type of `next()`
 */
export declare type GenericInterceptorOrKey<C extends Context = Context> = BindingAddress<GenericInterceptor<C>> | GenericInterceptor<C>;
/**
 * A chain of generic interceptors to be invoked for the given context
 *
 * @typeParam C - `Context` class or a subclass of `Context`
 */
export declare class GenericInterceptorChain<C extends Context = Context> {
    private context;
    /**
     * A getter for an array of interceptor functions or binding keys
     */
    protected getInterceptors: () => GenericInterceptorOrKey<C>[];
    /**
     * Create an invocation chain with a list of interceptor functions or
     * binding keys
     * @param context - Context object
     * @param interceptors - An array of interceptor functions or binding keys
     */
    constructor(context: C, interceptors: GenericInterceptorOrKey<C>[]);
    /**
     * Create an invocation interceptor chain with a binding filter and comparator.
     * The interceptors are discovered from the context using the binding filter and
     * sorted by the comparator (if provided).
     *
     * @param context - Context object
     * @param filter - A binding filter function to select interceptors
     * @param comparator - An optional comparator to sort matched interceptor bindings
     */
    constructor(context: C, filter: BindingFilter, comparator?: BindingComparator);
    /**
     * Invoke the interceptor chain
     */
    invokeInterceptors(): ValueOrPromise<InvocationResult>;
    /**
     * Invoke downstream interceptors or the target method
     */
    private next;
    /**
     * Invoke downstream interceptors
     */
    private invokeNextInterceptor;
    /**
     * Return the interceptor function or resolve the interceptor function as a binding
     * from the context
     *
     * @param interceptor - Interceptor function or binding key
     */
    private loadInterceptor;
}
/**
 * Invoke a chain of interceptors with the context
 * @param context - Context object
 * @param interceptors - An array of interceptor functions or binding keys
 */
export declare function invokeInterceptors<C extends Context = Context, T = InvocationResult>(context: C, interceptors: GenericInterceptorOrKey<C>[]): ValueOrPromise<T | undefined>;
