"use strict";
// Copyright IBM Corp. 2017,2018. All Rights Reserved.
// Node module: @loopback/core
// This file is licensed under the MIT License.
// License text available at https://opensource.org/licenses/MIT
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const context_1 = require("@loopback/context");
const assert_1 = __importDefault(require("assert"));
const debug_1 = __importDefault(require("debug"));
const p_event_1 = __importDefault(require("p-event"));
const component_1 = require("./component");
const keys_1 = require("./keys");
const lifecycle_1 = require("./lifecycle");
const lifecycle_registry_1 = require("./lifecycle-registry");
const service_1 = require("./service");
const debug = debug_1.default('loopback:core:application');
/**
 * Application is the container for various types of artifacts, such as
 * components, servers, controllers, repositories, datasources, connectors,
 * and models.
 */
class Application extends context_1.Context {
    constructor(configOrParent, parent) {
        var _a, _b;
        super(configOrParent instanceof context_1.Context ? configOrParent : parent, 'application');
        /**
         * A flag to indicate that the application is being shut down
         */
        this._isShuttingDown = false;
        /**
         * State of the application
         */
        this._state = 'created';
        if (configOrParent instanceof context_1.Context)
            configOrParent = {};
        this.options = (configOrParent !== null && configOrParent !== void 0 ? configOrParent : {});
        // Bind the life cycle observer registry
        this.bind(keys_1.CoreBindings.LIFE_CYCLE_OBSERVER_REGISTRY)
            .toClass(lifecycle_registry_1.LifeCycleObserverRegistry)
            .inScope(context_1.BindingScope.SINGLETON);
        // Bind to self to allow injection of application context in other modules.
        this.bind(keys_1.CoreBindings.APPLICATION_INSTANCE).to(this);
        // Make options available to other modules as well.
        this.bind(keys_1.CoreBindings.APPLICATION_CONFIG).to(this.options);
        const shutdownConfig = (_a = this.options.shutdown, (_a !== null && _a !== void 0 ? _a : {}));
        this.setupShutdown((_b = shutdownConfig.signals, (_b !== null && _b !== void 0 ? _b : ['SIGTERM'])), shutdownConfig.gracePeriod);
    }
    /**
     * Get the state of the application. The initial state is `created` and it can
     * transition as follows by `start` and `stop`:
     *
     * 1. start
     *   - !started -> starting -> started
     *   - started -> started (no-op)
     * 2. stop
     *   - started -> stopping -> stopped
     *   - !started -> stopped (no-op)
     *
     * Two types of states are expected:
     * - stable, such as `started` and `stopped`
     * - in process, such as `booting` and `starting`
     *
     * Operations such as `start` and `stop` can only be called at a stable state.
     * The logic should immediately set the state to a new one indicating work in
     * process, such as `starting` and `stopping`.
     */
    get state() {
        return this._state;
    }
    /**
     * Register a controller class with this application.
     *
     * @param controllerCtor - The controller class
     * (constructor function).
     * @param name - Optional controller name, default to the class name
     * @returns The newly created binding, you can use the reference to
     * further modify the binding, e.g. lock the value to prevent further
     * modifications.
     *
     * @example
     * ```ts
     * class MyController {
     * }
     * app.controller(MyController).lock();
     * ```
     */
    controller(controllerCtor, name) {
        debug('Adding controller %s', (name !== null && name !== void 0 ? name : controllerCtor.name));
        const binding = context_1.createBindingFromClass(controllerCtor, {
            name,
            namespace: keys_1.CoreBindings.CONTROLLERS,
            type: keys_1.CoreTags.CONTROLLER,
            defaultScope: context_1.BindingScope.TRANSIENT,
        });
        this.add(binding);
        return binding;
    }
    /**
     * Bind a Server constructor to the Application's master context.
     * Each server constructor added in this way must provide a unique prefix
     * to prevent binding overlap.
     *
     * @example
     * ```ts
     * app.server(RestServer);
     * // This server constructor will be bound under "servers.RestServer".
     * app.server(RestServer, "v1API");
     * // This server instance will be bound under "servers.v1API".
     * ```
     *
     * @param server - The server constructor.
     * @param name - Optional override for key name.
     * @returns Binding for the server class
     *
     */
    server(ctor, name) {
        debug('Adding server %s', (name !== null && name !== void 0 ? name : ctor.name));
        const binding = context_1.createBindingFromClass(ctor, {
            name,
            namespace: keys_1.CoreBindings.SERVERS,
            type: keys_1.CoreTags.SERVER,
            defaultScope: context_1.BindingScope.SINGLETON,
        }).apply(lifecycle_1.asLifeCycleObserver);
        this.add(binding);
        return binding;
    }
    /**
     * Bind an array of Server constructors to the Application's master
     * context.
     * Each server added in this way will automatically be named based on the
     * class constructor name with the "servers." prefix.
     *
     * @remarks
     * If you wish to control the binding keys for particular server instances,
     * use the app.server function instead.
     * ```ts
     * app.servers([
     *  RestServer,
     *  GRPCServer,
     * ]);
     * // Creates a binding for "servers.RestServer" and a binding for
     * // "servers.GRPCServer";
     * ```
     *
     * @param ctors - An array of Server constructors.
     * @returns An array of bindings for the registered server classes
     *
     */
    servers(ctors) {
        return ctors.map(ctor => this.server(ctor));
    }
    /**
     * Retrieve the singleton instance for a bound server.
     *
     * @typeParam T - Server type
     * @param ctor - The constructor that was used to make the
     * binding.
     * @returns A Promise of server instance
     *
     */
    async getServer(target) {
        let key;
        // instanceof check not reliable for string.
        if (typeof target === 'string') {
            key = `${keys_1.CoreBindings.SERVERS}.${target}`;
        }
        else {
            const ctor = target;
            key = `${keys_1.CoreBindings.SERVERS}.${ctor.name}`;
        }
        return this.get(key);
    }
    /**
     * Assert there is no other operation is in progress, i.e., the state is not
     * `*ing`, such as `starting` or `stopping`.
     *
     * @param op - The operation name, such as 'boot', 'start', or 'stop'
     */
    assertNotInProcess(op) {
        assert_1.default(!this._state.endsWith('ing'), `Cannot ${op} the application as it is ${this._state}.`);
    }
    /**
     * Assert current state of the application to be one of the expected values
     * @param op - The operation name, such as 'boot', 'start', or 'stop'
     * @param states - Valid states
     */
    assertInStates(op, ...states) {
        assert_1.default(states.includes(this._state), `Cannot ${op} the application as it is ${this._state}. Valid states are ${states}.`);
    }
    /**
     * Transition the application to a new state and emit an event
     * @param state - The new state
     */
    setState(state) {
        const oldState = this._state;
        this._state = state;
        if (oldState !== state) {
            this.emit('stateChanged', { from: oldState, to: this._state });
            this.emit(state);
        }
    }
    async awaitState(state) {
        await p_event_1.default(this, state);
    }
    /**
     * Start the application, and all of its registered observers. The application
     * state is checked to ensure the integrity of `start`.
     *
     * If the application is already started, no operation is performed.
     */
    async start() {
        if (this._state === 'starting')
            return this.awaitState('started');
        this.assertNotInProcess('start');
        // No-op if it's started
        if (this._state === 'started')
            return;
        this.setState('starting');
        const registry = await this.getLifeCycleObserverRegistry();
        await registry.start();
        this.setState('started');
    }
    /**
     * Stop the application instance and all of its registered observers. The
     * application state is checked to ensure the integrity of `stop`.
     *
     * If the application is already stopped or not started, no operation is
     * performed.
     */
    async stop() {
        if (this._state === 'stopping')
            return this.awaitState('stopped');
        this.assertNotInProcess('stop');
        // No-op if it's created or stopped
        if (this._state !== 'started')
            return;
        this.setState('stopping');
        const registry = await this.getLifeCycleObserverRegistry();
        await registry.stop();
        this.setState('stopped');
    }
    async getLifeCycleObserverRegistry() {
        return this.get(keys_1.CoreBindings.LIFE_CYCLE_OBSERVER_REGISTRY);
    }
    /**
     * Add a component to this application and register extensions such as
     * controllers, providers, and servers from the component.
     *
     * @param componentCtor - The component class to add.
     * @param name - Optional component name, default to the class name
     *
     * @example
     * ```ts
     *
     * export class ProductComponent {
     *   controllers = [ProductController];
     *   repositories = [ProductRepo, UserRepo];
     *   providers = {
     *     [AUTHENTICATION_STRATEGY]: AuthStrategy,
     *     [AUTHORIZATION_ROLE]: Role,
     *   };
     * };
     *
     * app.component(ProductComponent);
     * ```
     */
    component(componentCtor, name) {
        debug('Adding component: %s', (name !== null && name !== void 0 ? name : componentCtor.name));
        const binding = context_1.createBindingFromClass(componentCtor, {
            name,
            namespace: keys_1.CoreBindings.COMPONENTS,
            type: keys_1.CoreTags.COMPONENT,
            defaultScope: context_1.BindingScope.SINGLETON,
        });
        if (lifecycle_1.isLifeCycleObserverClass(componentCtor)) {
            binding.apply(lifecycle_1.asLifeCycleObserver);
        }
        this.add(binding);
        // Assuming components can be synchronously instantiated
        const instance = this.getSync(binding.key);
        component_1.mountComponent(this, instance);
        return binding;
    }
    /**
     * Set application metadata. `@loopback/boot` calls this method to populate
     * the metadata from `package.json`.
     *
     * @param metadata - Application metadata
     */
    setMetadata(metadata) {
        this.bind(keys_1.CoreBindings.APPLICATION_METADATA).to(metadata);
    }
    /**
     * Register a life cycle observer class
     * @param ctor - A class implements LifeCycleObserver
     * @param name - Optional name for the life cycle observer
     */
    lifeCycleObserver(ctor, name) {
        debug('Adding life cycle observer %s', (name !== null && name !== void 0 ? name : ctor.name));
        const binding = context_1.createBindingFromClass(ctor, {
            name,
            namespace: keys_1.CoreBindings.LIFE_CYCLE_OBSERVERS,
            type: keys_1.CoreTags.LIFE_CYCLE_OBSERVER,
            defaultScope: context_1.BindingScope.SINGLETON,
        }).apply(lifecycle_1.asLifeCycleObserver);
        this.add(binding);
        return binding;
    }
    /**
     * Add a service to this application.
     *
     * @param cls - The service or provider class
     *
     * @example
     *
     * ```ts
     * // Define a class to be bound via ctx.toClass()
     * @bind({scope: BindingScope.SINGLETON})
     * export class LogService {
     *   log(msg: string) {
     *     console.log(msg);
     *   }
     * }
     *
     * // Define a class to be bound via ctx.toProvider()
     * const uuidv4 = require('uuid/v4');
     * export class UuidProvider implements Provider<string> {
     *   value() {
     *     return uuidv4();
     *   }
     * }
     *
     * // Register the local services
     * app.service(LogService);
     * app.service(UuidProvider, 'uuid');
     *
     * export class MyController {
     *   constructor(
     *     @inject('services.uuid') private uuid: string,
     *     @inject('services.LogService') private log: LogService,
     *   ) {
     *   }
     *
     *   greet(name: string) {
     *     this.log(`Greet request ${this.uuid} received: ${name}`);
     *     return `${this.uuid}: ${name}`;
     *   }
     * }
     * ```
     */
    service(cls, name) {
        const options = typeof name === 'string' ? { name } : name;
        const binding = service_1.createServiceBinding(cls, options);
        this.add(binding);
        return binding;
    }
    /**
     * Set up signals that are captured to shutdown the application
     * @param signals - An array of signals to be trapped
     * @param gracePeriod - A grace period in ms before forced exit
     */
    setupShutdown(signals, gracePeriod) {
        const cleanup = async (signal) => {
            const kill = () => {
                // eslint-disable-next-line @typescript-eslint/no-misused-promises
                signals.forEach(sig => process.removeListener(sig, cleanup));
                process.kill(process.pid, signal);
            };
            debug('Signal %s received for process %d', signal, process.pid);
            if (!this._isShuttingDown) {
                this._isShuttingDown = true;
                let timer;
                if (typeof gracePeriod === 'number' && !isNaN(gracePeriod)) {
                    timer = setTimeout(kill, gracePeriod);
                }
                try {
                    await this.stop();
                }
                finally {
                    if (timer != null)
                        clearTimeout(timer);
                    kill();
                }
            }
        };
        // eslint-disable-next-line @typescript-eslint/no-misused-promises
        signals.forEach(sig => process.on(sig, cleanup));
    }
}
exports.Application = Application;
//# sourceMappingURL=application.js.map