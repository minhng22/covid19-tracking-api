"use strict";
// Copyright IBM Corp. 2019. All Rights Reserved.
// Node module: @loopback/repository
// This file is licensed under the MIT License.
// License text available at https://opensource.org/licenses/MIT
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const debug_1 = __importDefault(require("debug"));
const relation_helpers_1 = require("../relation.helpers");
const has_many_helpers_1 = require("./has-many.helpers");
const debug = debug_1.default('loopback:repository:has-many-inclusion-resolver');
/**
 * Creates InclusionResolver for HasMany relation.
 * Notice that this function only generates the inclusionResolver.
 * It doesn't register it for the source repository.
 *
 * Notice: scope field for inclusion is not supported yet.
 *
 * @param meta - resolved metadata of the hasMany relation
 * @param getTargetRepo - target repository i.e where related instances are
 */
function createHasManyInclusionResolver(meta, getTargetRepo) {
    const relationMeta = has_many_helpers_1.resolveHasManyMetadata(meta);
    return async function fetchHasManyModels(entities, inclusion, options) {
        if (!entities.length)
            return [];
        debug('Fetching target models for entities:', entities);
        debug('Relation metadata:', relationMeta);
        const sourceKey = relationMeta.keyFrom;
        const sourceIds = entities.map(e => e[sourceKey]);
        const targetKey = relationMeta.keyTo;
        debug('Parameters:', { sourceKey, sourceIds, targetKey });
        debug('sourceId types', sourceIds.map(i => typeof i));
        const targetRepo = await getTargetRepo();
        const targetsFound = await relation_helpers_1.findByForeignKeys(targetRepo, targetKey, sourceIds, inclusion.scope, options);
        debug('Targets found:', targetsFound);
        const result = relation_helpers_1.flattenTargetsOfOneToManyRelation(sourceIds, targetsFound, targetKey);
        debug('fetchHasManyModels result', result);
        return result;
    };
}
exports.createHasManyInclusionResolver = createHasManyInclusionResolver;
//# sourceMappingURL=has-many.inclusion-resolver.js.map