"use strict";
// Copyright IBM Corp. 2018. All Rights Reserved.
// Node module: @loopback/rest
// This file is licensed under the MIT License.
// License text available at https://opensource.org/licenses/MIT
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const context_1 = require("@loopback/context");
const openapi_v3_1 = require("@loopback/openapi-v3");
const debug_1 = __importDefault(require("debug"));
const type_is_1 = require("type-is");
const rest_http_error_1 = require("../rest-http-error");
const body_parser_helpers_1 = require("./body-parser.helpers");
const types_1 = require("./types");
const debug = debug_1.default('loopback:rest:body-parser');
let RequestBodyParser = class RequestBodyParser {
    constructor(parsers, ctx) {
        this.ctx = ctx;
        this.parsers = sortParsers((parsers !== null && parsers !== void 0 ? parsers : []));
        if (debug.enabled) {
            debug('Body parsers: ', this.parsers.map(p => p.name));
        }
    }
    async loadRequestBodyIfNeeded(operationSpec, request) {
        const { requestBody, customParser } = await this._matchRequestBodySpec(operationSpec, request);
        if (!operationSpec.requestBody)
            return requestBody;
        const matchedMediaType = requestBody.mediaType;
        try {
            if (customParser) {
                // Invoke the custom parser
                const body = await this._invokeCustomParser(customParser, request);
                return Object.assign(requestBody, body);
            }
            else {
                const parser = this._findParser(matchedMediaType);
                if (parser) {
                    const body = await parser.parse(request);
                    return Object.assign(requestBody, body);
                }
            }
        }
        catch (err) {
            throw body_parser_helpers_1.normalizeParsingError(err);
        }
        throw rest_http_error_1.RestHttpErrors.unsupportedMediaType(matchedMediaType);
    }
    /**
     * Match the http request to a given media type of the request body spec
     */
    async _matchRequestBodySpec(operationSpec, request) {
        var _a;
        const requestBody = {
            value: undefined,
        };
        if (!operationSpec.requestBody)
            return { requestBody };
        const contentType = (_a = body_parser_helpers_1.getContentType(request), (_a !== null && _a !== void 0 ? _a : 'application/json'));
        debug('Loading request body with content type %j', contentType);
        // the type of `operationSpec.requestBody` could be `RequestBodyObject`
        // or `ReferenceObject`, resolving a `$ref` value is not supported yet.
        if (openapi_v3_1.isReferenceObject(operationSpec.requestBody)) {
            throw new Error('$ref requestBody is not supported yet.');
        }
        let content = operationSpec.requestBody.content || {};
        if (!Object.keys(content).length) {
            content = {
                // default to allow json and urlencoded
                'application/json': { schema: { type: 'object' } },
                'application/x-www-form-urlencoded': { schema: { type: 'object' } },
            };
        }
        // Check of the request content type matches one of the expected media
        // types in the request body spec
        let matchedMediaType = false;
        let customParser = undefined;
        for (const type in content) {
            matchedMediaType = type_is_1.is(contentType, type);
            if (matchedMediaType) {
                debug('Matched media type: %s -> %s', type, contentType);
                requestBody.mediaType = contentType;
                requestBody.schema = content[type].schema;
                customParser = content[type]['x-parser'];
                break;
            }
        }
        if (!matchedMediaType) {
            // No matching media type found, fail fast
            throw rest_http_error_1.RestHttpErrors.unsupportedMediaType(contentType, Object.keys(content));
        }
        return { requestBody, customParser };
    }
    /**
     * Find a body parser that supports the media type
     * @param matchedMediaType - Media type
     */
    _findParser(matchedMediaType) {
        for (const parser of this.parsers) {
            if (!parser.supports(matchedMediaType)) {
                debug('Body parser %s does not support %s', parser.name, matchedMediaType);
                continue;
            }
            debug('Body parser %s found for %s', parser.name, matchedMediaType);
            return parser;
        }
    }
    /**
     * Resolve and invoke a custom parser
     * @param customParser - The parser name, class or function
     * @param request - Http request
     */
    async _invokeCustomParser(customParser, request) {
        if (typeof customParser === 'string') {
            const parser = this.parsers.find(p => p.name === customParser ||
                p.name === body_parser_helpers_1.builtinParsers.mapping[customParser]);
            if (parser) {
                debug('Using custom parser %s', customParser);
                return parser.parse(request);
            }
        }
        else if (typeof customParser === 'function') {
            if (isBodyParserClass(customParser)) {
                debug('Using custom parser class %s', customParser.name);
                const parser = await context_1.instantiateClass(customParser, this.ctx);
                return parser.parse(request);
            }
            else {
                debug('Using custom parser function %s', customParser.name);
                return customParser(request);
            }
        }
        throw new Error('Custom parser not found: ' + customParser);
    }
};
RequestBodyParser = __decorate([
    __param(0, context_1.inject(context_1.filterByTag(types_1.REQUEST_BODY_PARSER_TAG), { optional: true })),
    __param(1, context_1.inject.context()),
    __metadata("design:paramtypes", [Array, context_1.Context])
], RequestBodyParser);
exports.RequestBodyParser = RequestBodyParser;
/**
 * Test if a function is a body parser class or plain function
 * @param fn
 */
function isBodyParserClass(fn) {
    return fn.toString().startsWith('class ');
}
/**
 * Sort body parsers so that built-in ones are used after extensions
 * @param parsers
 */
function sortParsers(parsers) {
    return parsers.sort((a, b) => context_1.compareByOrder(a.name, b.name, body_parser_helpers_1.builtinParsers.names));
}
//# sourceMappingURL=body-parser.js.map