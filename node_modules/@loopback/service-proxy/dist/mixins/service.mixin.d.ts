import { Binding, Provider } from '@loopback/context';
import { Application } from '@loopback/core';
/**
 * Interface for classes with `new` operator.
 */
export interface Class<T> {
    new (...args: any[]): T;
}
/**
 * A mixin class for Application that creates a .serviceProvider()
 * function to register a service automatically. Also overrides
 * component function to allow it to register repositories automatically.
 *
 * @example
 * ```ts
 * class MyApplication extends ServiceMixin(Application) {}
 * ```
 *
 * Please note: the members in the mixin function are documented in a dummy class
 * called <a href="#ServiceMixinDoc">ServiceMixinDoc</a>
 *
 */
export declare function ServiceMixin<T extends Class<any>>(superClass: T): {
    new (...args: any[]): {
        [x: string]: any;
        /**
         * Add a service to this application.
         *
         * @deprecated Use app.service() instead
         *
         * @param provider - The service provider to register.
         *
         * @example
         * ```ts
         * export interface GeocoderService {
         *   geocode(address: string): Promise<GeoPoint[]>;
         * }
         *
         * export class GeocoderServiceProvider implements Provider<GeocoderService> {
         *   constructor(
         *     @inject('services.geocoder')
         *     protected dataSource: juggler.DataSource = new GeocoderDataSource(),
         *   ) {}
         *
         *   value(): Promise<GeocoderService> {
         *     return getService(this.dataSource);
         *   }
         * }
         *
         * app.serviceProvider(GeocoderServiceProvider);
         * ```
         */
        serviceProvider<S>(provider: Class<Provider<S>>, name?: string | undefined): Binding<S>;
        /**
         * Add a component to this application. Also mounts
         * all the components services.
         *
         * @param component - The component to add.
         *
         * @example
         * ```ts
         *
         * export class ProductComponent {
         *   controllers = [ProductController];
         *   repositories = [ProductRepo, UserRepo];
         *   providers = {
         *     [AUTHENTICATION_STRATEGY]: AuthStrategy,
         *     [AUTHORIZATION_ROLE]: Role,
         *   };
         * };
         *
         * app.component(ProductComponent);
         * ```
         */
        component(component: Class<unknown>, name?: string | undefined): void;
        /**
         * Get an instance of a component and mount all it's
         * services. This function is intended to be used internally
         * by component()
         *
         * @param component - The component to mount services of
         */
        mountComponentServices(component: Class<unknown>): void;
    };
} & T;
/**
 * Interface for an Application mixed in with ServiceMixin
 */
export interface ApplicationWithServices extends Application {
    serviceProvider<S>(provider: Class<Provider<S>>, name?: string): Binding<S>;
    component(component: Class<{}>, name?: string): Binding;
    mountComponentServices(component: Class<{}>): void;
}
/**
 * A dummy class created to generate the tsdoc for the members in service
 * mixin. Please don't use it.
 *
 * The members are implemented in function
 * <a href="#ServiceMixin">ServiceMixin</a>
 */
export declare class ServiceMixinDoc {
    constructor(...args: any[]);
    /**
     * Add a service to this application.
     *
     * @param provider - The service provider to register.
     *
     * @example
     * ```ts
     * export interface GeocoderService {
     *   geocode(address: string): Promise<GeoPoint[]>;
     * }
     *
     * export class GeocoderServiceProvider implements Provider<GeocoderService> {
     *   constructor(
     *     @inject('datasources.geocoder')
     *     protected dataSource: juggler.DataSource = new GeocoderDataSource(),
     *   ) {}
     *
     *   value(): Promise<GeocoderService> {
     *     return getService(this.dataSource);
     *   }
     * }
     *
     * app.serviceProvider(GeocoderServiceProvider);
     * ```
     */
    serviceProvider<S>(provider: Class<Provider<S>>): Binding<S>;
    /**
     * Add a component to this application. Also mounts
     * all the components services.
     *
     * @param component - The component to add.
     *
     * @example
     * ```ts
     *
     * export class ProductComponent {
     *   controllers = [ProductController];
     *   repositories = [ProductRepo, UserRepo];
     *   providers = {
     *     [AUTHENTICATION_STRATEGY]: AuthStrategy,
     *     [AUTHORIZATION_ROLE]: Role,
     *   };
     * };
     *
     * app.component(ProductComponent);
     * ```
     */
    component(component: Class<unknown>): Binding;
    /**
     * Get an instance of a component and mount all it's
     * services. This function is intended to be used internally
     * by component()
     *
     * @param component - The component to mount services of
     */
    mountComponentServices(component: Class<unknown>): void;
}
