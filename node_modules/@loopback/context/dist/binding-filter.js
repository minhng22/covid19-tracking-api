"use strict";
// Copyright IBM Corp. 2019. All Rights Reserved.
// Node module: @loopback/context
// This file is licensed under the MIT License.
// License text available at https://opensource.org/licenses/MIT
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Type guard for binding address
 * @param bindingSelector
 */
function isBindingAddress(bindingSelector) {
    return typeof bindingSelector !== 'function';
}
exports.isBindingAddress = isBindingAddress;
/**
 * Create a binding filter for the tag pattern
 * @param tagPattern - Binding tag name, regexp, or object
 */
function filterByTag(tagPattern) {
    if (typeof tagPattern === 'string' || tagPattern instanceof RegExp) {
        const regexp = typeof tagPattern === 'string'
            ? wildcardToRegExp(tagPattern)
            : tagPattern;
        return b => Array.from(b.tagNames).some(t => regexp.test(t));
    }
    else {
        return b => {
            for (const t in tagPattern) {
                // One tag name/value does not match
                if (b.tagMap[t] !== tagPattern[t])
                    return false;
            }
            // All tag name/value pairs match
            return true;
        };
    }
}
exports.filterByTag = filterByTag;
/**
 * Create a binding filter from key pattern
 * @param keyPattern - Binding key/wildcard, regexp, or a filter function
 */
function filterByKey(keyPattern) {
    if (typeof keyPattern === 'string') {
        const regex = wildcardToRegExp(keyPattern);
        return binding => regex.test(binding.key);
    }
    else if (keyPattern instanceof RegExp) {
        return binding => keyPattern.test(binding.key);
    }
    else if (typeof keyPattern === 'function') {
        return keyPattern;
    }
    return () => true;
}
exports.filterByKey = filterByKey;
/**
 * Convert a wildcard pattern to RegExp
 * @param pattern - A wildcard string with `*` and `?` as special characters.
 * - `*` matches zero or more characters except `.` and `:`
 * - `?` matches exactly one character except `.` and `:`
 */
function wildcardToRegExp(pattern) {
    // Escape reserved chars for RegExp:
    // `- \ ^ $ + . ( ) | { } [ ] :`
    let regexp = pattern.replace(/[\-\[\]\/\{\}\(\)\+\.\\\^\$\|\:]/g, '\\$&');
    // Replace wildcard chars `*` and `?`
    // `*` matches zero or more characters except `.` and `:`
    // `?` matches one character except `.` and `:`
    regexp = regexp.replace(/\*/g, '[^.:]*').replace(/\?/g, '[^.:]');
    return new RegExp(`^${regexp}$`);
}
//# sourceMappingURL=binding-filter.js.map