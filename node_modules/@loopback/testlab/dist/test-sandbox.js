"use strict";
// Copyright IBM Corp. 2018. All Rights Reserved.
// Node module: @loopback/testlab
// This file is licensed under the MIT License.
// License text available at https://opensource.org/licenses/MIT
Object.defineProperty(exports, "__esModule", { value: true });
const fs_extra_1 = require("fs-extra");
const path_1 = require("path");
/**
 * TestSandbox class provides a convenient way to get a reference to a
 * sandbox folder in which you can perform operations for testing purposes.
 */
class TestSandbox {
    /**
     * Will create a directory if it doesn't already exist. If it exists, you
     * still get an instance of the TestSandbox.
     *
     * @param path - Path of the TestSandbox. If relative (it will be resolved relative to cwd()).
     */
    constructor(path) {
        // resolve ensures path is absolute / makes it absolute (relative to cwd())
        this._path = path_1.resolve(path);
        fs_extra_1.ensureDirSync(this.path);
    }
    get path() {
        if (!this._path) {
            throw new Error(`TestSandbox instance was deleted. Create a new instance.`);
        }
        return this._path;
    }
    /**
     * Returns the path of the TestSandbox
     */
    getPath() {
        return this.path;
    }
    /**
     * Resets the TestSandbox. (Remove all files in it).
     */
    async reset() {
        // Decache files from require's cache so future tests aren't affected incase
        // a file is recreated in sandbox with the same file name but different
        // contents after resetting the sandbox.
        for (const key in require.cache) {
            if (key.startsWith(this.path)) {
                delete require.cache[key];
            }
        }
        await fs_extra_1.emptyDir(this.path);
    }
    /**
     * Deletes the TestSandbox.
     */
    async delete() {
        await fs_extra_1.remove(this.path);
        delete this._path;
    }
    /**
     * Makes a directory in the TestSandbox
     *
     * @param dir - Name of directory to create (relative to TestSandbox path)
     */
    async mkdir(dir) {
        await fs_extra_1.ensureDir(path_1.resolve(this.path, dir));
    }
    /**
     * Copies a file from src to the TestSandbox. If copying a `.js` file which
     * has an accompanying `.js.map` file in the src file location, the dest file
     * will have its sourceMappingURL updated to point to the original file as
     * an absolute path so you don't need to copy the map file.
     *
     * @param src - Absolute path of file to be copied to the TestSandbox
     * @param dest - Optional. Destination filename of the copy operation
     * (relative to TestSandbox). Original filename used if not specified.
     */
    async copyFile(src, dest) {
        dest = dest
            ? path_1.resolve(this.path, dest)
            : path_1.resolve(this.path, path_1.parse(src).base);
        await fs_extra_1.copy(src, dest);
        if (path_1.parse(src).ext === '.js' && fs_extra_1.pathExists(src + '.map')) {
            const srcMap = src + '.map';
            await fs_extra_1.appendFile(dest, `\n//# sourceMappingURL=${srcMap}`);
        }
    }
    /**
     * Creates a new file and writes the given data serialized as JSON.
     *
     * @param dest - Destination filename, optionally including a relative path.
     * @param data - The data to write.
     */
    async writeJsonFile(dest, data) {
        dest = path_1.resolve(this.path, dest);
        const destDir = path_1.parse(dest).dir;
        await fs_extra_1.ensureDir(destDir);
        return fs_extra_1.writeJson(dest, data, { spaces: 2 });
    }
    /**
     * Creates a new file and writes the given data as a UTF-8-encoded text.
     *
     * @param dest - Destination filename, optionally including a relative path.
     * @param data - The text to write.
     */
    async writeTextFile(dest, data) {
        dest = path_1.resolve(this.path, dest);
        const destDir = path_1.parse(dest).dir;
        await fs_extra_1.ensureDir(destDir);
        return fs_extra_1.writeFile(dest, data, { encoding: 'utf-8' });
    }
}
exports.TestSandbox = TestSandbox;
//# sourceMappingURL=test-sandbox.js.map