"use strict";
// Copyright IBM Corp. 2018,2019. All Rights Reserved.
// Node module: @loopback/testlab
// This file is licensed under the MIT License.
// License text available at https://opensource.org/licenses/MIT
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("fs");
const path_1 = __importDefault(require("path"));
const FIXTURES = path_1.default.resolve(__dirname, '../fixtures');
const DUMMY_TLS_CONFIG = {
    key: fs_1.readFileSync(path_1.default.join(FIXTURES, 'key.pem')),
    cert: fs_1.readFileSync(path_1.default.join(FIXTURES, 'cert.pem')),
};
/**
 * Create an HTTP-server configuration that works well in test environments.
 *  - Ask the operating system to assign a free (ephemeral) port.
 *  - Use IPv4 localhost `127.0.0.1` to avoid known IPv6 issues in Docker-based
 *    environments like Travis-CI.
 *  - Provide default TLS key & cert when `protocol` is set to `https`.
 *
 * @param customConfig - Additional configuration options to apply.
 */
function givenHttpServerConfig(customConfig) {
    const defaults = {
        host: '127.0.0.1',
        port: 0,
        protocol: undefined,
    };
    const config = Object.assign({}, defaults, customConfig);
    if (config.host === undefined)
        config.host = defaults.host;
    if (config.port === undefined)
        config.port = defaults.port;
    if (isHttpsConfig(config)) {
        setupTlsConfig(config);
    }
    return config;
}
exports.givenHttpServerConfig = givenHttpServerConfig;
function setupTlsConfig(config) {
    if ('key' in config && 'cert' in config)
        return;
    if ('pfx' in config)
        return;
    Object.assign(config, DUMMY_TLS_CONFIG);
}
function isHttpsConfig(config) {
    return config && config.protocol === 'https';
}
//# sourceMappingURL=http-server-config.js.map