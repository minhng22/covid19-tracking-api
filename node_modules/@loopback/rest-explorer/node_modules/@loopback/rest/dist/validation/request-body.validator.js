"use strict";
// Copyright IBM Corp. 2018,2019. All Rights Reserved.
// Node module: @loopback/rest
// This file is licensed under the MIT License.
// License text available at https://opensource.org/licenses/MIT
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const openapi_v3_1 = require("@loopback/openapi-v3");
const ajv_1 = __importDefault(require("ajv"));
const debug_1 = __importDefault(require("debug"));
const lodash_1 = __importDefault(require("lodash"));
const util_1 = __importDefault(require("util"));
const __1 = require("..");
const toJsonSchema = require('openapi-schema-to-json-schema');
const debug = debug_1.default('loopback:rest:validation');
const ajvKeywords = require('ajv-keywords');
/**
 * Check whether the request body is valid according to the provided OpenAPI schema.
 * The JSON schema is generated from the OpenAPI schema which is typically defined
 * by `@requestBody()`.
 * The validation leverages AJV schema validator.
 * @param body - The request body parsed from an HTTP request.
 * @param requestBodySpec - The OpenAPI requestBody specification defined in `@requestBody()`.
 * @param globalSchemas - The referenced schemas generated from `OpenAPISpec.components.schemas`.
 * @param options - Request body validation options for AJV
 */
function validateRequestBody(body, requestBodySpec, globalSchemas = {}, options = {}) {
    var _a;
    const required = (_a = requestBodySpec) === null || _a === void 0 ? void 0 : _a.required;
    if (required && body.value == null) {
        const err = Object.assign(new __1.HttpErrors.BadRequest('Request body is required'), {
            code: 'MISSING_REQUIRED_PARAMETER',
            parameterName: 'request body',
        });
        throw err;
    }
    const schema = body.schema;
    /* istanbul ignore if */
    if (debug.enabled) {
        debug('Request body schema:', util_1.default.inspect(schema, { depth: null }));
        if (schema &&
            openapi_v3_1.isReferenceObject(schema) &&
            schema.$ref.startsWith('#/components/schemas/')) {
            const ref = schema.$ref.slice('#/components/schemas/'.length);
            debug('  referencing:', util_1.default.inspect(globalSchemas[ref], { depth: null }));
        }
    }
    if (!schema)
        return;
    options = Object.assign({ coerceTypes: !!body.coercionRequired }, options);
    validateValueAgainstSchema(body.value, schema, globalSchemas, options);
}
exports.validateRequestBody = validateRequestBody;
/**
 * Convert an OpenAPI schema to the corresponding JSON schema.
 * @param openapiSchema - The OpenAPI schema to convert.
 */
function convertToJsonSchema(openapiSchema) {
    const jsonSchema = toJsonSchema(openapiSchema);
    delete jsonSchema['$schema'];
    /* istanbul ignore if */
    if (debug.enabled) {
        debug('Converted OpenAPI schema to JSON schema: %s', util_1.default.inspect(jsonSchema, { depth: null }));
    }
    return jsonSchema;
}
/**
 * Built-in cache for complied schemas by AJV
 */
const DEFAULT_COMPILED_SCHEMA_CACHE = new WeakMap();
/**
 * Build a cache key for AJV options
 * @param options - Request body validation options
 */
function getKeyForOptions(options) {
    const ajvOptions = {};
    // Sort keys for options
    const keys = Object.keys(options).sort();
    for (const k of keys) {
        if (k === 'compiledSchemaCache')
            continue;
        ajvOptions[k] = options[k];
    }
    return JSON.stringify(ajvOptions);
}
/**
 * Validate the request body data against JSON schema.
 * @param body - The request body data.
 * @param schema - The JSON schema used to perform the validation.
 * @param globalSchemas - Schema references.
 * @param options - Request body validation options.
 */
function validateValueAgainstSchema(
// eslint-disable-next-line @typescript-eslint/no-explicit-any
body, schema, globalSchemas = {}, options = {}) {
    var _a;
    let validate;
    const cache = (_a = options.compiledSchemaCache, (_a !== null && _a !== void 0 ? _a : DEFAULT_COMPILED_SCHEMA_CACHE));
    const key = getKeyForOptions(options);
    let validatorMap;
    if (cache.has(schema)) {
        validatorMap = cache.get(schema);
        validate = validatorMap.get(key);
    }
    if (!validate) {
        validate = createValidator(schema, globalSchemas, options);
        validatorMap = (validatorMap !== null && validatorMap !== void 0 ? validatorMap : new Map());
        validatorMap.set(key, validate);
        cache.set(schema, validatorMap);
    }
    if (validate(body)) {
        debug('Request body passed AJV validation.');
        return;
    }
    let validationErrors = validate.errors;
    /* istanbul ignore if */
    if (debug.enabled) {
        debug('Invalid request body: %s. Errors: %s', util_1.default.inspect(body, { depth: null }), util_1.default.inspect(validationErrors));
    }
    if (typeof options.ajvErrorTransformer === 'function') {
        validationErrors = options.ajvErrorTransformer(validationErrors);
    }
    const error = __1.RestHttpErrors.invalidRequestBody();
    error.details = lodash_1.default.map(validationErrors, e => {
        return {
            path: e.dataPath,
            code: e.keyword,
            message: e.message,
            info: e.params,
        };
    });
    throw error;
}
function createValidator(schema, globalSchemas, options) {
    const jsonSchema = convertToJsonSchema(schema);
    const schemaWithRef = Object.assign({ components: {} }, jsonSchema);
    schemaWithRef.components = {
        schemas: globalSchemas,
    };
    // See https://github.com/epoberezkin/ajv#options
    options = Object.assign({}, {
        allErrors: true,
        // nullable: support keyword "nullable" from Open API 3 specification.
        nullable: true,
    }, options);
    debug('AJV options', options);
    const ajv = new ajv_1.default(options);
    if (options.ajvKeywords === true) {
        ajvKeywords(ajv);
    }
    else if (Array.isArray(options.ajvKeywords)) {
        ajvKeywords(ajv, options.ajvKeywords);
    }
    return ajv.compile(schemaWithRef);
}
//# sourceMappingURL=request-body.validator.js.map