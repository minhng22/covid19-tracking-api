"use strict";
// Copyright IBM Corp. 2018. All Rights Reserved.
// Node module: @loopback/boot
// This file is licensed under the MIT License.
// License text available at https://opensource.org/licenses/MIT
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const context_1 = require("@loopback/context");
const core_1 = require("@loopback/core");
const keys_1 = require("../keys");
const types_1 = require("../types");
const base_artifact_booter_1 = require("./base-artifact.booter");
/**
 * A class that extends BaseArtifactBooter to boot the 'Controller' artifact type.
 * Discovered controllers are bound using `app.controller()`.
 *
 * Supported phases: configure, discover, load
 *
 * @param app - Application instance
 * @param projectRoot - Root of User Project relative to which all paths are resolved
 * @param bootConfig - Controller Artifact Options Object
 */
let ControllerBooter = class ControllerBooter extends base_artifact_booter_1.BaseArtifactBooter {
    constructor(app, projectRoot, controllerConfig = {}) {
        super(projectRoot, 
        // Set Controller Booter Options if passed in via bootConfig
        Object.assign({}, exports.ControllerDefaults, controllerConfig));
        this.app = app;
        this.controllerConfig = controllerConfig;
    }
    /**
     * Uses super method to get a list of Artifact classes. Boot each class by
     * binding it to the application using `app.controller(controller);`.
     */
    async load() {
        await super.load();
        this.classes.forEach(cls => {
            this.app.controller(cls);
        });
    }
};
ControllerBooter = __decorate([
    types_1.booter('controllers'),
    __param(0, context_1.inject(core_1.CoreBindings.APPLICATION_INSTANCE)),
    __param(1, context_1.inject(keys_1.BootBindings.PROJECT_ROOT)),
    __param(2, context_1.config()),
    __metadata("design:paramtypes", [core_1.Application, String, Object])
], ControllerBooter);
exports.ControllerBooter = ControllerBooter;
/**
 * Default ArtifactOptions for ControllerBooter.
 */
exports.ControllerDefaults = {
    dirs: ['controllers'],
    extensions: ['.controller.js'],
    nested: true,
};
//# sourceMappingURL=controller.booter.js.map