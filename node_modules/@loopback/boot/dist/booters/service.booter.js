"use strict";
// Copyright IBM Corp. 2018,2019. All Rights Reserved.
// Node module: @loopback/boot
// This file is licensed under the MIT License.
// License text available at https://opensource.org/licenses/MIT
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const context_1 = require("@loopback/context");
const core_1 = require("@loopback/core");
const debug_1 = tslib_1.__importDefault(require("debug"));
const keys_1 = require("../keys");
const types_1 = require("../types");
const base_artifact_booter_1 = require("./base-artifact.booter");
const debug = debug_1.default('loopback:boot:service-booter');
/**
 * A class that extends BaseArtifactBooter to boot the 'Service' artifact type.
 * Discovered DataSources are bound using `app.controller()`.
 *
 * Supported phases: configure, discover, load
 *
 * @param app - Application instance
 * @param projectRoot - Root of User Project relative to which all paths are resolved
 * @param bootConfig - Service Artifact Options Object
 */
let ServiceBooter = class ServiceBooter extends base_artifact_booter_1.BaseArtifactBooter {
    constructor(app, projectRoot, serviceConfig = {}) {
        super(projectRoot, 
        // Set Service Booter Options if passed in via bootConfig
        Object.assign({}, exports.ServiceDefaults, serviceConfig));
        this.app = app;
        this.serviceConfig = serviceConfig;
    }
    /**
     * Uses super method to get a list of Artifact classes. Boot each file by
     * creating a DataSourceConstructor and binding it to the application class.
     */
    async load() {
        await super.load();
        for (const cls of this.classes) {
            if (!isBindableClass(cls))
                continue;
            debug('Bind class: %s', cls.name);
            const binding = this.app.service(cls);
            debug('Binding created for class: %j', binding);
        }
    }
};
ServiceBooter = tslib_1.__decorate([
    types_1.booter('services'),
    tslib_1.__param(0, context_1.inject(core_1.CoreBindings.APPLICATION_INSTANCE)),
    tslib_1.__param(1, context_1.inject(keys_1.BootBindings.PROJECT_ROOT)),
    tslib_1.__param(2, context_1.config()),
    tslib_1.__metadata("design:paramtypes", [Object, String, Object])
], ServiceBooter);
exports.ServiceBooter = ServiceBooter;
/**
 * Default ArtifactOptions for DataSourceBooter.
 */
exports.ServiceDefaults = {
    dirs: ['services'],
    extensions: ['.service.js'],
    nested: true,
};
function isServiceProvider(cls) {
    const hasSupportedName = cls.name.endsWith('Provider');
    const hasValueMethod = typeof cls.prototype.value === 'function';
    return hasSupportedName && hasValueMethod;
}
function isBindableClass(cls) {
    if (context_1.MetadataInspector.getClassMetadata(context_1.BINDING_METADATA_KEY, cls)) {
        return true;
    }
    if (isServiceProvider(cls)) {
        debug('Provider class found: %s', cls.name);
        return true;
    }
    debug('Skip class not decorated with @bind: %s', cls.name);
    return false;
}
//# sourceMappingURL=service.booter.js.map