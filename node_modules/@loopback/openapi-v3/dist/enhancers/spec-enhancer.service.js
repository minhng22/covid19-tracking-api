"use strict";
// Copyright IBM Corp. 2019. All Rights Reserved.
// Node module: @loopback/openapi-v3
// This file is licensed under the MIT License.
// License text available at https://opensource.org/licenses/MIT
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@loopback/core");
const debug_1 = __importDefault(require("debug"));
const _ = __importStar(require("lodash"));
const util_1 = require("util");
const types_1 = require("./types");
const jsonmergepatch = require('json-merge-patch');
const debug = debug_1.default('loopback:openapi:spec-enhancer');
/**
 * An extension point for OpenAPI Spec enhancement
 * This service is used for enhancing an OpenAPI spec by loading and applying one or more
 * registered enhancers.
 *
 * A typical use of it would be generating the OpenAPI spec for the endpoints on a server
 * in the `@loopback/rest` module.
 */
let OASEnhancerService = class OASEnhancerService {
    constructor(
    /**
     * Inject a getter function to fetch spec enhancers
     */
    getEnhancers, 
    /**
     * An extension point should be able to receive its options via dependency
     * injection.
     */
    options) {
        this.getEnhancers = getEnhancers;
        this.options = options;
        this._spec = {
            openapi: '3.0.0',
            info: {
                title: 'LoopBack Application',
                version: '1.0.0',
            },
            paths: {},
        };
    }
    /**
     * Getter for `_spec`
     */
    get spec() {
        return this._spec;
    }
    /**
     * Setter for `_spec`
     */
    set spec(value) {
        this._spec = value;
    }
    /**
     * Find an enhancer by its name
     * @param name The name of the enhancer you want to find
     */
    async getEnhancerByName(name) {
        // Get the latest list of enhancers
        const enhancers = await this.getEnhancers();
        return enhancers.find(e => e.name === name);
    }
    /**
     * Apply a given enhancer's merge function. Return the latest _spec.
     * @param name The name of the enhancer you want to apply
     */
    async applyEnhancerByName(name) {
        const enhancer = await this.getEnhancerByName(name);
        if (enhancer)
            this._spec = enhancer.modifySpec(this._spec);
        return this._spec;
    }
    /**
     * Generate OpenAPI spec by applying ALL registered enhancers
     * TBD: load enhancers by group names
     */
    async applyAllEnhancers(options = {}) {
        const enhancers = await this.getEnhancers();
        if (_.isEmpty(enhancers))
            return this._spec;
        for (const e of enhancers) {
            this._spec = e.modifySpec(this._spec);
        }
        debug(`Spec enhancer service, generated spec: ${util_1.inspect(this._spec)}`);
        return this._spec;
    }
};
OASEnhancerService = __decorate([
    core_1.extensionPoint(types_1.OAS_ENHANCER_EXTENSION_POINT_NAME),
    __param(0, core_1.extensions()),
    __param(1, core_1.config()),
    __metadata("design:paramtypes", [Function, Object])
], OASEnhancerService);
exports.OASEnhancerService = OASEnhancerService;
/**
 * The default merge function to patch the current OpenAPI spec.
 * It leverages module `json-merge-patch`'s merge API to merge two json objects.
 * It returns a new merged object without modifying the original one.
 *
 * A list of merging rules can be found in test file:
 * https://github.com/pierreinglebert/json-merge-patch/blob/master/test/lib/merge.js
 *
 * @param currentSpec The original spec
 * @param patchSpec The patch spec to be merged into the original spec
 */
function mergeOpenAPISpec(currentSpec, patchSpec) {
    const mergedSpec = jsonmergepatch.merge(currentSpec, patchSpec);
    return mergedSpec;
}
exports.mergeOpenAPISpec = mergeOpenAPISpec;
//# sourceMappingURL=spec-enhancer.service.js.map