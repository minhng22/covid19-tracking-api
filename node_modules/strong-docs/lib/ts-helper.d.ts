import { DeclarationReflection } from 'typedoc';
import { Comment, Reflection, Type, ParameterReflection } from 'typedoc/dist/lib/models';
import { Annotation } from './annotation';
import { ReflectionFlags } from 'typedoc/dist/lib/models/reflections/abstract';
export declare type AnyObject<T = any> = {
    [name: string]: T;
};
export declare type Options = AnyObject;
export interface Node extends DeclarationReflection {
    filename?: string;
    tsHelpers?: TSHelper;
    comment_copy?: Comment;
    anchorId?: string;
    shouldDocument?: boolean;
}
export interface Section {
    title: string;
    anchor?: string;
    depth: number;
    annotation?: Annotation;
}
export declare class TSHelper {
    static getTypeStr(type: Type | undefined): string;
    static commaSepParams(params?: ParameterReflection[]): string;
    static getSignatureForFunction(param: ParameterReflection): string;
    /**
     * Get flags as a string
     *
     * - Private
     * - Protected
     * - Static
     * - ExportAssignment
     * - Optional
     * - DefaultValue
     * - Rest
     * - Abstract
     * - Let
     * - Const
     *
     * @param {*} flags
     */
    static getFlags(flags: ReflectionFlags): string;
    /**
     * Get variable type as Const/Let/Variable
     * @param {*} varNode
     */
    static getVariableType(varNode: Reflection): string;
    static getVariableStr(varNode: Node): string;
    static shouldDocument(node: Node): boolean;
    static getNodeTitle(node: Node): string;
}
