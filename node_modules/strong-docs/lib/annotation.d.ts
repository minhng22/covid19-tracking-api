import { Doc } from './doc';
import { Docs } from './docs';
import { Comment, Tag } from './dox';
import { Section, AnyObject } from './ts-helper';
/**
 * Create a strong-docs annotation object from a **dox** comment.
 *
 * @param {Comment} comment A raw dox comment
 * @param {Docs} docs The parent Docs object
 * @class
 */
export declare class Annotation {
    classDesc: string;
    propertyAnnotations: Annotation[];
    moduleExample: string;
    rawComment: Comment;
    commentTemplate: string;
    tags: Tag[];
    doc: Doc;
    docs: Docs;
    attrs: AnyObject;
    ignore?: boolean;
    section: Section;
    header: string;
    sectionTitle: string;
    anchor: string;
    html: string;
    type: string;
    args: Tag[];
    isConstructor: boolean;
    methods: Annotation[];
    callbackTag?: Tag;
    promise?: AnyObject;
    optionsTag: Tag;
    static readonly aliases: {
        [name: string]: string;
    };
    private parseTagForType;
    private _setProperty;
    private readonly setProperty;
    private tagParsers;
    constructor(comment: Comment, doc: Doc);
    /**
     * Determine the type of the annotation.
     *
     * **Types:**
     *
     *  - `class`    - has attribute `@class`
     *  - `instance` - an instance member
     *  - `static`   - a static member
     *  - `overview` - has `@file` or `@overview`
     *  - `default`  - not a defined type
     *
     * **Instance / Static**
     *
     * For `instance` or `static` types, the annotation may have the `@static` or
     * `@instance` attribute. They must also define that they are a member of an
     * object or class using the `@memberof` attribute.
     *
     * ```js
     * /**
     *  * A sample static method.
     *  * @param  {Number} foo
     *  * @param  {Number} bar
     *  * @static
     *  * @memberof MyClass
     *  * ...
     *
     * MyClass.myStaticMethod = function (foo, bar) {
     *   // ...
     * }
     * ```
     *
     * @return {String} type
     */
    determineType(): string;
    /**
     * Build the section object.
     */
    buildSection(): Section;
    md(str: string): string;
    /**
     * Render the annotation as html.
     */
    render(): string;
    _renderDescriptionHtml(desc: string): string;
}
