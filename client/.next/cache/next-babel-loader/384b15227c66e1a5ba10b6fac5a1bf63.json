{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nvar React = require('react');\n\nvar __jsx = React.createElement;\n\nvar CanvasJS = require('./canvasjs.min');\n\nCanvasJS = CanvasJS.Chart ? CanvasJS : window.CanvasJS;\n\nvar CanvasJSChart = /*#__PURE__*/function (_React$Component) {\n  _inherits(CanvasJSChart, _React$Component);\n\n  var _super = _createSuper(CanvasJSChart);\n\n  function CanvasJSChart(props) {\n    var _this;\n\n    _classCallCheck(this, CanvasJSChart);\n\n    _this = _super.call(this, props);\n    _this.options = props.options ? props.options : {};\n    _this.containerProps = props.containerProps ? props.containerProps : {\n      width: \"100%\",\n      position: \"relative\"\n    };\n    _this.containerProps.height = props.containerProps && props.containerProps.height ? props.containerProps.height : _this.options.height ? _this.options.height + \"px\" : \"400px\";\n    _this.chartContainerId = \"canvasjs-react-chart-container-\" + CanvasJSChart._cjsContainerId++;\n    return _this;\n  }\n\n  _createClass(CanvasJSChart, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      //Create Chart and Render\t\t\n      this.chart = new CanvasJS.Chart(this.chartContainerId, this.options);\n      this.chart.render();\n      if (this.props.onRef) this.props.onRef(this.chart);\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      //Check if Chart-options has changed and determine if component has to be updated\n      return !(nextProps.options === this.options);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      //Update Chart Options & Render\n      this.chart.options = this.props.options;\n      this.chart.render();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      //Destroy chart and remove reference\n      this.chart.destroy();\n      if (this.props.onRef) this.props.onRef(undefined);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      //return React.createElement('div', { id: this.chartContainerId, style: this.containerProps });\t\t\n      return __jsx(\"div\", {\n        id: this.chartContainerId,\n        style: this.containerProps\n      });\n    }\n  }]);\n\n  return CanvasJSChart;\n}(React.Component);\n\n_defineProperty(CanvasJSChart, \"_cjsContainerId\", 0);\n\nvar CanvasJSReact = {\n  CanvasJSChart: CanvasJSChart,\n  CanvasJS: CanvasJS\n};\nexport default CanvasJSReact;","map":null,"metadata":{},"sourceType":"module"}